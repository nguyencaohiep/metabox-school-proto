// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: activity-log.proto

package activity_log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivityLogService_LogAdminCreate_FullMethodName = "/cti.activity_log.v1.ActivityLogService/LogAdminCreate"
	ActivityLogService_LogUserCreate_FullMethodName  = "/cti.activity_log.v1.ActivityLogService/LogUserCreate"
)

// ActivityLogServiceClient is the client API for ActivityLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityLogServiceClient interface {
	LogAdminCreate(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error)
	LogUserCreate(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error)
}

type activityLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityLogServiceClient(cc grpc.ClientConnInterface) ActivityLogServiceClient {
	return &activityLogServiceClient{cc}
}

func (c *activityLogServiceClient) LogAdminCreate(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error) {
	out := new(LogCreateResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_LogAdminCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityLogServiceClient) LogUserCreate(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error) {
	out := new(LogCreateResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_LogUserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityLogServiceServer is the server API for ActivityLogService service.
// All implementations must embed UnimplementedActivityLogServiceServer
// for forward compatibility
type ActivityLogServiceServer interface {
	LogAdminCreate(context.Context, *LogCreateRequest) (*LogCreateResponse, error)
	LogUserCreate(context.Context, *LogCreateRequest) (*LogCreateResponse, error)
	mustEmbedUnimplementedActivityLogServiceServer()
}

// UnimplementedActivityLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityLogServiceServer struct {
}

func (UnimplementedActivityLogServiceServer) LogAdminCreate(context.Context, *LogCreateRequest) (*LogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAdminCreate not implemented")
}
func (UnimplementedActivityLogServiceServer) LogUserCreate(context.Context, *LogCreateRequest) (*LogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogUserCreate not implemented")
}
func (UnimplementedActivityLogServiceServer) mustEmbedUnimplementedActivityLogServiceServer() {}

// UnsafeActivityLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityLogServiceServer will
// result in compilation errors.
type UnsafeActivityLogServiceServer interface {
	mustEmbedUnimplementedActivityLogServiceServer()
}

func RegisterActivityLogServiceServer(s grpc.ServiceRegistrar, srv ActivityLogServiceServer) {
	s.RegisterService(&ActivityLogService_ServiceDesc, srv)
}

func _ActivityLogService_LogAdminCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).LogAdminCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_LogAdminCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).LogAdminCreate(ctx, req.(*LogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityLogService_LogUserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).LogUserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_LogUserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).LogUserCreate(ctx, req.(*LogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityLogService_ServiceDesc is the grpc.ServiceDesc for ActivityLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cti.activity_log.v1.ActivityLogService",
	HandlerType: (*ActivityLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogAdminCreate",
			Handler:    _ActivityLogService_LogAdminCreate_Handler,
		},
		{
			MethodName: "LogUserCreate",
			Handler:    _ActivityLogService_LogUserCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity-log.proto",
}
