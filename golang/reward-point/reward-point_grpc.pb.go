// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: reward-point.proto

package reward_point

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RewardPointService_PointVendorCreate_FullMethodName = "/cti.reward_point.v1.RewardPointService/PointVendorCreate"
)

// RewardPointServiceClient is the client API for RewardPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardPointServiceClient interface {
	PointVendorCreate(ctx context.Context, in *PointVendorCreateRequest, opts ...grpc.CallOption) (*PointVendorCreateResponse, error)
}

type rewardPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardPointServiceClient(cc grpc.ClientConnInterface) RewardPointServiceClient {
	return &rewardPointServiceClient{cc}
}

func (c *rewardPointServiceClient) PointVendorCreate(ctx context.Context, in *PointVendorCreateRequest, opts ...grpc.CallOption) (*PointVendorCreateResponse, error) {
	out := new(PointVendorCreateResponse)
	err := c.cc.Invoke(ctx, RewardPointService_PointVendorCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardPointServiceServer is the server API for RewardPointService service.
// All implementations must embed UnimplementedRewardPointServiceServer
// for forward compatibility
type RewardPointServiceServer interface {
	PointVendorCreate(context.Context, *PointVendorCreateRequest) (*PointVendorCreateResponse, error)
	mustEmbedUnimplementedRewardPointServiceServer()
}

// UnimplementedRewardPointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRewardPointServiceServer struct {
}

func (UnimplementedRewardPointServiceServer) PointVendorCreate(context.Context, *PointVendorCreateRequest) (*PointVendorCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointVendorCreate not implemented")
}
func (UnimplementedRewardPointServiceServer) mustEmbedUnimplementedRewardPointServiceServer() {}

// UnsafeRewardPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardPointServiceServer will
// result in compilation errors.
type UnsafeRewardPointServiceServer interface {
	mustEmbedUnimplementedRewardPointServiceServer()
}

func RegisterRewardPointServiceServer(s grpc.ServiceRegistrar, srv RewardPointServiceServer) {
	s.RegisterService(&RewardPointService_ServiceDesc, srv)
}

func _RewardPointService_PointVendorCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointVendorCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointServiceServer).PointVendorCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointService_PointVendorCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointServiceServer).PointVendorCreate(ctx, req.(*PointVendorCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardPointService_ServiceDesc is the grpc.ServiceDesc for RewardPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cti.reward_point.v1.RewardPointService",
	HandlerType: (*RewardPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PointVendorCreate",
			Handler:    _RewardPointService_PointVendorCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward-point.proto",
}
