// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: search.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SearchService_AddRecordFolder_FullMethodName             = "/cti.search.v1.SearchService/AddRecordFolder"
	SearchService_UpdateRecordFolder_FullMethodName          = "/cti.search.v1.SearchService/UpdateRecordFolder"
	SearchService_DeleteRecordFolder_FullMethodName          = "/cti.search.v1.SearchService/DeleteRecordFolder"
	SearchService_AddRecordAccountPlatform_FullMethodName    = "/cti.search.v1.SearchService/AddRecordAccountPlatform"
	SearchService_UpdateRecordAccountPlatform_FullMethodName = "/cti.search.v1.SearchService/UpdateRecordAccountPlatform"
	SearchService_DeleteRecordAccountPlatform_FullMethodName = "/cti.search.v1.SearchService/DeleteRecordAccountPlatform"
	SearchService_AddRecordDocument_FullMethodName           = "/cti.search.v1.SearchService/AddRecordDocument"
	SearchService_UpdateRecordDocument_FullMethodName        = "/cti.search.v1.SearchService/UpdateRecordDocument"
	SearchService_DeleteRecordDocument_FullMethodName        = "/cti.search.v1.SearchService/DeleteRecordDocument"
	SearchService_AddRecordInfrastructure_FullMethodName     = "/cti.search.v1.SearchService/AddRecordInfrastructure"
	SearchService_UpdateRecordInfrastructure_FullMethodName  = "/cti.search.v1.SearchService/UpdateRecordInfrastructure"
	SearchService_DeleteRecordInfrastructure_FullMethodName  = "/cti.search.v1.SearchService/DeleteRecordInfrastructure"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	AddRecordFolder(ctx context.Context, in *RecordFolderRequest, opts ...grpc.CallOption) (*RecordFolderResponse, error)
	UpdateRecordFolder(ctx context.Context, in *RecordFolderRequest, opts ...grpc.CallOption) (*RecordFolderResponse, error)
	DeleteRecordFolder(ctx context.Context, in *RecordFolderRequest, opts ...grpc.CallOption) (*RecordFolderResponse, error)
	AddRecordAccountPlatform(ctx context.Context, in *RecordAccountPlatformRequest, opts ...grpc.CallOption) (*RecordAccountPlatformResponse, error)
	UpdateRecordAccountPlatform(ctx context.Context, in *RecordAccountPlatformRequest, opts ...grpc.CallOption) (*RecordAccountPlatformResponse, error)
	DeleteRecordAccountPlatform(ctx context.Context, in *RecordAccountPlatformRequest, opts ...grpc.CallOption) (*RecordAccountPlatformResponse, error)
	AddRecordDocument(ctx context.Context, in *RecordDocumentRequest, opts ...grpc.CallOption) (*RecordDocumentResponse, error)
	UpdateRecordDocument(ctx context.Context, in *RecordDocumentRequest, opts ...grpc.CallOption) (*RecordDocumentResponse, error)
	DeleteRecordDocument(ctx context.Context, in *RecordDocumentRequest, opts ...grpc.CallOption) (*RecordDocumentResponse, error)
	AddRecordInfrastructure(ctx context.Context, in *RecordInfrastructureRequest, opts ...grpc.CallOption) (*RecordInfrastructureResponse, error)
	UpdateRecordInfrastructure(ctx context.Context, in *RecordInfrastructureRequest, opts ...grpc.CallOption) (*RecordInfrastructureResponse, error)
	DeleteRecordInfrastructure(ctx context.Context, in *RecordInfrastructureRequest, opts ...grpc.CallOption) (*RecordInfrastructureResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) AddRecordFolder(ctx context.Context, in *RecordFolderRequest, opts ...grpc.CallOption) (*RecordFolderResponse, error) {
	out := new(RecordFolderResponse)
	err := c.cc.Invoke(ctx, SearchService_AddRecordFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateRecordFolder(ctx context.Context, in *RecordFolderRequest, opts ...grpc.CallOption) (*RecordFolderResponse, error) {
	out := new(RecordFolderResponse)
	err := c.cc.Invoke(ctx, SearchService_UpdateRecordFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteRecordFolder(ctx context.Context, in *RecordFolderRequest, opts ...grpc.CallOption) (*RecordFolderResponse, error) {
	out := new(RecordFolderResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteRecordFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) AddRecordAccountPlatform(ctx context.Context, in *RecordAccountPlatformRequest, opts ...grpc.CallOption) (*RecordAccountPlatformResponse, error) {
	out := new(RecordAccountPlatformResponse)
	err := c.cc.Invoke(ctx, SearchService_AddRecordAccountPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateRecordAccountPlatform(ctx context.Context, in *RecordAccountPlatformRequest, opts ...grpc.CallOption) (*RecordAccountPlatformResponse, error) {
	out := new(RecordAccountPlatformResponse)
	err := c.cc.Invoke(ctx, SearchService_UpdateRecordAccountPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteRecordAccountPlatform(ctx context.Context, in *RecordAccountPlatformRequest, opts ...grpc.CallOption) (*RecordAccountPlatformResponse, error) {
	out := new(RecordAccountPlatformResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteRecordAccountPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) AddRecordDocument(ctx context.Context, in *RecordDocumentRequest, opts ...grpc.CallOption) (*RecordDocumentResponse, error) {
	out := new(RecordDocumentResponse)
	err := c.cc.Invoke(ctx, SearchService_AddRecordDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateRecordDocument(ctx context.Context, in *RecordDocumentRequest, opts ...grpc.CallOption) (*RecordDocumentResponse, error) {
	out := new(RecordDocumentResponse)
	err := c.cc.Invoke(ctx, SearchService_UpdateRecordDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteRecordDocument(ctx context.Context, in *RecordDocumentRequest, opts ...grpc.CallOption) (*RecordDocumentResponse, error) {
	out := new(RecordDocumentResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteRecordDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) AddRecordInfrastructure(ctx context.Context, in *RecordInfrastructureRequest, opts ...grpc.CallOption) (*RecordInfrastructureResponse, error) {
	out := new(RecordInfrastructureResponse)
	err := c.cc.Invoke(ctx, SearchService_AddRecordInfrastructure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateRecordInfrastructure(ctx context.Context, in *RecordInfrastructureRequest, opts ...grpc.CallOption) (*RecordInfrastructureResponse, error) {
	out := new(RecordInfrastructureResponse)
	err := c.cc.Invoke(ctx, SearchService_UpdateRecordInfrastructure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteRecordInfrastructure(ctx context.Context, in *RecordInfrastructureRequest, opts ...grpc.CallOption) (*RecordInfrastructureResponse, error) {
	out := new(RecordInfrastructureResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteRecordInfrastructure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	AddRecordFolder(context.Context, *RecordFolderRequest) (*RecordFolderResponse, error)
	UpdateRecordFolder(context.Context, *RecordFolderRequest) (*RecordFolderResponse, error)
	DeleteRecordFolder(context.Context, *RecordFolderRequest) (*RecordFolderResponse, error)
	AddRecordAccountPlatform(context.Context, *RecordAccountPlatformRequest) (*RecordAccountPlatformResponse, error)
	UpdateRecordAccountPlatform(context.Context, *RecordAccountPlatformRequest) (*RecordAccountPlatformResponse, error)
	DeleteRecordAccountPlatform(context.Context, *RecordAccountPlatformRequest) (*RecordAccountPlatformResponse, error)
	AddRecordDocument(context.Context, *RecordDocumentRequest) (*RecordDocumentResponse, error)
	UpdateRecordDocument(context.Context, *RecordDocumentRequest) (*RecordDocumentResponse, error)
	DeleteRecordDocument(context.Context, *RecordDocumentRequest) (*RecordDocumentResponse, error)
	AddRecordInfrastructure(context.Context, *RecordInfrastructureRequest) (*RecordInfrastructureResponse, error)
	UpdateRecordInfrastructure(context.Context, *RecordInfrastructureRequest) (*RecordInfrastructureResponse, error)
	DeleteRecordInfrastructure(context.Context, *RecordInfrastructureRequest) (*RecordInfrastructureResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) AddRecordFolder(context.Context, *RecordFolderRequest) (*RecordFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordFolder not implemented")
}
func (UnimplementedSearchServiceServer) UpdateRecordFolder(context.Context, *RecordFolderRequest) (*RecordFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordFolder not implemented")
}
func (UnimplementedSearchServiceServer) DeleteRecordFolder(context.Context, *RecordFolderRequest) (*RecordFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordFolder not implemented")
}
func (UnimplementedSearchServiceServer) AddRecordAccountPlatform(context.Context, *RecordAccountPlatformRequest) (*RecordAccountPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordAccountPlatform not implemented")
}
func (UnimplementedSearchServiceServer) UpdateRecordAccountPlatform(context.Context, *RecordAccountPlatformRequest) (*RecordAccountPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordAccountPlatform not implemented")
}
func (UnimplementedSearchServiceServer) DeleteRecordAccountPlatform(context.Context, *RecordAccountPlatformRequest) (*RecordAccountPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordAccountPlatform not implemented")
}
func (UnimplementedSearchServiceServer) AddRecordDocument(context.Context, *RecordDocumentRequest) (*RecordDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordDocument not implemented")
}
func (UnimplementedSearchServiceServer) UpdateRecordDocument(context.Context, *RecordDocumentRequest) (*RecordDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordDocument not implemented")
}
func (UnimplementedSearchServiceServer) DeleteRecordDocument(context.Context, *RecordDocumentRequest) (*RecordDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordDocument not implemented")
}
func (UnimplementedSearchServiceServer) AddRecordInfrastructure(context.Context, *RecordInfrastructureRequest) (*RecordInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordInfrastructure not implemented")
}
func (UnimplementedSearchServiceServer) UpdateRecordInfrastructure(context.Context, *RecordInfrastructureRequest) (*RecordInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordInfrastructure not implemented")
}
func (UnimplementedSearchServiceServer) DeleteRecordInfrastructure(context.Context, *RecordInfrastructureRequest) (*RecordInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordInfrastructure not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_AddRecordFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).AddRecordFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_AddRecordFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).AddRecordFolder(ctx, req.(*RecordFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateRecordFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateRecordFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_UpdateRecordFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateRecordFolder(ctx, req.(*RecordFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteRecordFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteRecordFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteRecordFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteRecordFolder(ctx, req.(*RecordFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_AddRecordAccountPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAccountPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).AddRecordAccountPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_AddRecordAccountPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).AddRecordAccountPlatform(ctx, req.(*RecordAccountPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateRecordAccountPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAccountPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateRecordAccountPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_UpdateRecordAccountPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateRecordAccountPlatform(ctx, req.(*RecordAccountPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteRecordAccountPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAccountPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteRecordAccountPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteRecordAccountPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteRecordAccountPlatform(ctx, req.(*RecordAccountPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_AddRecordDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).AddRecordDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_AddRecordDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).AddRecordDocument(ctx, req.(*RecordDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateRecordDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateRecordDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_UpdateRecordDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateRecordDocument(ctx, req.(*RecordDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteRecordDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteRecordDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteRecordDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteRecordDocument(ctx, req.(*RecordDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_AddRecordInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).AddRecordInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_AddRecordInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).AddRecordInfrastructure(ctx, req.(*RecordInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateRecordInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateRecordInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_UpdateRecordInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateRecordInfrastructure(ctx, req.(*RecordInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteRecordInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteRecordInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteRecordInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteRecordInfrastructure(ctx, req.(*RecordInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cti.search.v1.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecordFolder",
			Handler:    _SearchService_AddRecordFolder_Handler,
		},
		{
			MethodName: "UpdateRecordFolder",
			Handler:    _SearchService_UpdateRecordFolder_Handler,
		},
		{
			MethodName: "DeleteRecordFolder",
			Handler:    _SearchService_DeleteRecordFolder_Handler,
		},
		{
			MethodName: "AddRecordAccountPlatform",
			Handler:    _SearchService_AddRecordAccountPlatform_Handler,
		},
		{
			MethodName: "UpdateRecordAccountPlatform",
			Handler:    _SearchService_UpdateRecordAccountPlatform_Handler,
		},
		{
			MethodName: "DeleteRecordAccountPlatform",
			Handler:    _SearchService_DeleteRecordAccountPlatform_Handler,
		},
		{
			MethodName: "AddRecordDocument",
			Handler:    _SearchService_AddRecordDocument_Handler,
		},
		{
			MethodName: "UpdateRecordDocument",
			Handler:    _SearchService_UpdateRecordDocument_Handler,
		},
		{
			MethodName: "DeleteRecordDocument",
			Handler:    _SearchService_DeleteRecordDocument_Handler,
		},
		{
			MethodName: "AddRecordInfrastructure",
			Handler:    _SearchService_AddRecordInfrastructure_Handler,
		},
		{
			MethodName: "UpdateRecordInfrastructure",
			Handler:    _SearchService_UpdateRecordInfrastructure_Handler,
		},
		{
			MethodName: "DeleteRecordInfrastructure",
			Handler:    _SearchService_DeleteRecordInfrastructure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
