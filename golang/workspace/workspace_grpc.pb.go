// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: workspace.proto

package workspace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkspaceService_ConfigByWorkspaceID_FullMethodName         = "/cti.workspace.v1.WorkspaceService/ConfigByWorkspaceID"
	WorkspaceService_ConfigCheckIPWhiteList_FullMethodName      = "/cti.workspace.v1.WorkspaceService/ConfigCheckIPWhiteList"
	WorkspaceService_ConfigTimeZoneByWorkspaceID_FullMethodName = "/cti.workspace.v1.WorkspaceService/ConfigTimeZoneByWorkspaceID"
	WorkspaceService_ConfigSalaryByStaffSale_FullMethodName     = "/cti.workspace.v1.WorkspaceService/ConfigSalaryByStaffSale"
	WorkspaceService_ConfigSalaryByCoachSale_FullMethodName     = "/cti.workspace.v1.WorkspaceService/ConfigSalaryByCoachSale"
	WorkspaceService_ConfigSalaryByRose_FullMethodName          = "/cti.workspace.v1.WorkspaceService/ConfigSalaryByRose"
	WorkspaceService_ConfigSalaryByImagePrint_FullMethodName    = "/cti.workspace.v1.WorkspaceService/ConfigSalaryByImagePrint"
	WorkspaceService_WorkspaceAll_FullMethodName                = "/cti.workspace.v1.WorkspaceService/WorkspaceAll"
	WorkspaceService_WorkspaceFindByID_FullMethodName           = "/cti.workspace.v1.WorkspaceService/WorkspaceFindByID"
	WorkspaceService_WorkspaceLicenseID_FullMethodName          = "/cti.workspace.v1.WorkspaceService/WorkspaceLicenseID"
	WorkspaceService_VerifyWorkspace_FullMethodName             = "/cti.workspace.v1.WorkspaceService/VerifyWorkspace"
	WorkspaceService_WorkspaceRoot_FullMethodName               = "/cti.workspace.v1.WorkspaceService/WorkspaceRoot"
)

// WorkspaceServiceClient is the client API for WorkspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceServiceClient interface {
	ConfigByWorkspaceID(ctx context.Context, in *ConfigByWorkspaceIDRequest, opts ...grpc.CallOption) (*Config, error)
	ConfigCheckIPWhiteList(ctx context.Context, in *ConfigCheckIPWhiteListRequest, opts ...grpc.CallOption) (*ConfigCheckIPWhiteListResponse, error)
	ConfigTimeZoneByWorkspaceID(ctx context.Context, in *ConfigTimeZoneByWorkspaceIDRequest, opts ...grpc.CallOption) (*ConfigTimeZoneByWorkspaceIDResponse, error)
	ConfigSalaryByStaffSale(ctx context.Context, in *ConfigSalaryByStaffSaleRequest, opts ...grpc.CallOption) (*StaffSale, error)
	ConfigSalaryByCoachSale(ctx context.Context, in *ConfigSalaryByCoachSaleRequest, opts ...grpc.CallOption) (*CoachSale, error)
	ConfigSalaryByRose(ctx context.Context, in *ConfigSalaryByRoseRequest, opts ...grpc.CallOption) (*Rose, error)
	ConfigSalaryByImagePrint(ctx context.Context, in *ConfigSalaryByImagePrintRequest, opts ...grpc.CallOption) (*ImagePrint, error)
	WorkspaceAll(ctx context.Context, in *WorkspaceAllRequest, opts ...grpc.CallOption) (*AllWorkspace, error)
	WorkspaceFindByID(ctx context.Context, in *WorkspaceFindByIDRequest, opts ...grpc.CallOption) (*Workspace, error)
	WorkspaceLicenseID(ctx context.Context, in *WorkspaceLicenseByIDRequest, opts ...grpc.CallOption) (*WorkspaceLicenseByIDResponse, error)
	VerifyWorkspace(ctx context.Context, in *VerifyWorkspaceRequest, opts ...grpc.CallOption) (*VerifyWorkspaceResponse, error)
	WorkspaceRoot(ctx context.Context, in *WorkspaceRootRequest, opts ...grpc.CallOption) (*RootWorkspace, error)
}

type workspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceServiceClient(cc grpc.ClientConnInterface) WorkspaceServiceClient {
	return &workspaceServiceClient{cc}
}

func (c *workspaceServiceClient) ConfigByWorkspaceID(ctx context.Context, in *ConfigByWorkspaceIDRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigByWorkspaceID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ConfigCheckIPWhiteList(ctx context.Context, in *ConfigCheckIPWhiteListRequest, opts ...grpc.CallOption) (*ConfigCheckIPWhiteListResponse, error) {
	out := new(ConfigCheckIPWhiteListResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigCheckIPWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ConfigTimeZoneByWorkspaceID(ctx context.Context, in *ConfigTimeZoneByWorkspaceIDRequest, opts ...grpc.CallOption) (*ConfigTimeZoneByWorkspaceIDResponse, error) {
	out := new(ConfigTimeZoneByWorkspaceIDResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigTimeZoneByWorkspaceID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ConfigSalaryByStaffSale(ctx context.Context, in *ConfigSalaryByStaffSaleRequest, opts ...grpc.CallOption) (*StaffSale, error) {
	out := new(StaffSale)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigSalaryByStaffSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ConfigSalaryByCoachSale(ctx context.Context, in *ConfigSalaryByCoachSaleRequest, opts ...grpc.CallOption) (*CoachSale, error) {
	out := new(CoachSale)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigSalaryByCoachSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ConfigSalaryByRose(ctx context.Context, in *ConfigSalaryByRoseRequest, opts ...grpc.CallOption) (*Rose, error) {
	out := new(Rose)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigSalaryByRose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ConfigSalaryByImagePrint(ctx context.Context, in *ConfigSalaryByImagePrintRequest, opts ...grpc.CallOption) (*ImagePrint, error) {
	out := new(ImagePrint)
	err := c.cc.Invoke(ctx, WorkspaceService_ConfigSalaryByImagePrint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) WorkspaceAll(ctx context.Context, in *WorkspaceAllRequest, opts ...grpc.CallOption) (*AllWorkspace, error) {
	out := new(AllWorkspace)
	err := c.cc.Invoke(ctx, WorkspaceService_WorkspaceAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) WorkspaceFindByID(ctx context.Context, in *WorkspaceFindByIDRequest, opts ...grpc.CallOption) (*Workspace, error) {
	out := new(Workspace)
	err := c.cc.Invoke(ctx, WorkspaceService_WorkspaceFindByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) WorkspaceLicenseID(ctx context.Context, in *WorkspaceLicenseByIDRequest, opts ...grpc.CallOption) (*WorkspaceLicenseByIDResponse, error) {
	out := new(WorkspaceLicenseByIDResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_WorkspaceLicenseID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) VerifyWorkspace(ctx context.Context, in *VerifyWorkspaceRequest, opts ...grpc.CallOption) (*VerifyWorkspaceResponse, error) {
	out := new(VerifyWorkspaceResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_VerifyWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) WorkspaceRoot(ctx context.Context, in *WorkspaceRootRequest, opts ...grpc.CallOption) (*RootWorkspace, error) {
	out := new(RootWorkspace)
	err := c.cc.Invoke(ctx, WorkspaceService_WorkspaceRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServiceServer is the server API for WorkspaceService service.
// All implementations must embed UnimplementedWorkspaceServiceServer
// for forward compatibility
type WorkspaceServiceServer interface {
	ConfigByWorkspaceID(context.Context, *ConfigByWorkspaceIDRequest) (*Config, error)
	ConfigCheckIPWhiteList(context.Context, *ConfigCheckIPWhiteListRequest) (*ConfigCheckIPWhiteListResponse, error)
	ConfigTimeZoneByWorkspaceID(context.Context, *ConfigTimeZoneByWorkspaceIDRequest) (*ConfigTimeZoneByWorkspaceIDResponse, error)
	ConfigSalaryByStaffSale(context.Context, *ConfigSalaryByStaffSaleRequest) (*StaffSale, error)
	ConfigSalaryByCoachSale(context.Context, *ConfigSalaryByCoachSaleRequest) (*CoachSale, error)
	ConfigSalaryByRose(context.Context, *ConfigSalaryByRoseRequest) (*Rose, error)
	ConfigSalaryByImagePrint(context.Context, *ConfigSalaryByImagePrintRequest) (*ImagePrint, error)
	WorkspaceAll(context.Context, *WorkspaceAllRequest) (*AllWorkspace, error)
	WorkspaceFindByID(context.Context, *WorkspaceFindByIDRequest) (*Workspace, error)
	WorkspaceLicenseID(context.Context, *WorkspaceLicenseByIDRequest) (*WorkspaceLicenseByIDResponse, error)
	VerifyWorkspace(context.Context, *VerifyWorkspaceRequest) (*VerifyWorkspaceResponse, error)
	WorkspaceRoot(context.Context, *WorkspaceRootRequest) (*RootWorkspace, error)
	mustEmbedUnimplementedWorkspaceServiceServer()
}

// UnimplementedWorkspaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServiceServer struct {
}

func (UnimplementedWorkspaceServiceServer) ConfigByWorkspaceID(context.Context, *ConfigByWorkspaceIDRequest) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigByWorkspaceID not implemented")
}
func (UnimplementedWorkspaceServiceServer) ConfigCheckIPWhiteList(context.Context, *ConfigCheckIPWhiteListRequest) (*ConfigCheckIPWhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigCheckIPWhiteList not implemented")
}
func (UnimplementedWorkspaceServiceServer) ConfigTimeZoneByWorkspaceID(context.Context, *ConfigTimeZoneByWorkspaceIDRequest) (*ConfigTimeZoneByWorkspaceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigTimeZoneByWorkspaceID not implemented")
}
func (UnimplementedWorkspaceServiceServer) ConfigSalaryByStaffSale(context.Context, *ConfigSalaryByStaffSaleRequest) (*StaffSale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSalaryByStaffSale not implemented")
}
func (UnimplementedWorkspaceServiceServer) ConfigSalaryByCoachSale(context.Context, *ConfigSalaryByCoachSaleRequest) (*CoachSale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSalaryByCoachSale not implemented")
}
func (UnimplementedWorkspaceServiceServer) ConfigSalaryByRose(context.Context, *ConfigSalaryByRoseRequest) (*Rose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSalaryByRose not implemented")
}
func (UnimplementedWorkspaceServiceServer) ConfigSalaryByImagePrint(context.Context, *ConfigSalaryByImagePrintRequest) (*ImagePrint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSalaryByImagePrint not implemented")
}
func (UnimplementedWorkspaceServiceServer) WorkspaceAll(context.Context, *WorkspaceAllRequest) (*AllWorkspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkspaceAll not implemented")
}
func (UnimplementedWorkspaceServiceServer) WorkspaceFindByID(context.Context, *WorkspaceFindByIDRequest) (*Workspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkspaceFindByID not implemented")
}
func (UnimplementedWorkspaceServiceServer) WorkspaceLicenseID(context.Context, *WorkspaceLicenseByIDRequest) (*WorkspaceLicenseByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkspaceLicenseID not implemented")
}
func (UnimplementedWorkspaceServiceServer) VerifyWorkspace(context.Context, *VerifyWorkspaceRequest) (*VerifyWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWorkspace not implemented")
}
func (UnimplementedWorkspaceServiceServer) WorkspaceRoot(context.Context, *WorkspaceRootRequest) (*RootWorkspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkspaceRoot not implemented")
}
func (UnimplementedWorkspaceServiceServer) mustEmbedUnimplementedWorkspaceServiceServer() {}

// UnsafeWorkspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServiceServer will
// result in compilation errors.
type UnsafeWorkspaceServiceServer interface {
	mustEmbedUnimplementedWorkspaceServiceServer()
}

func RegisterWorkspaceServiceServer(s grpc.ServiceRegistrar, srv WorkspaceServiceServer) {
	s.RegisterService(&WorkspaceService_ServiceDesc, srv)
}

func _WorkspaceService_ConfigByWorkspaceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigByWorkspaceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigByWorkspaceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigByWorkspaceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigByWorkspaceID(ctx, req.(*ConfigByWorkspaceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ConfigCheckIPWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCheckIPWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigCheckIPWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigCheckIPWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigCheckIPWhiteList(ctx, req.(*ConfigCheckIPWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ConfigTimeZoneByWorkspaceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigTimeZoneByWorkspaceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigTimeZoneByWorkspaceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigTimeZoneByWorkspaceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigTimeZoneByWorkspaceID(ctx, req.(*ConfigTimeZoneByWorkspaceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ConfigSalaryByStaffSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSalaryByStaffSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigSalaryByStaffSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigSalaryByStaffSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigSalaryByStaffSale(ctx, req.(*ConfigSalaryByStaffSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ConfigSalaryByCoachSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSalaryByCoachSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigSalaryByCoachSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigSalaryByCoachSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigSalaryByCoachSale(ctx, req.(*ConfigSalaryByCoachSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ConfigSalaryByRose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSalaryByRoseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigSalaryByRose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigSalaryByRose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigSalaryByRose(ctx, req.(*ConfigSalaryByRoseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ConfigSalaryByImagePrint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSalaryByImagePrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ConfigSalaryByImagePrint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ConfigSalaryByImagePrint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ConfigSalaryByImagePrint(ctx, req.(*ConfigSalaryByImagePrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_WorkspaceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).WorkspaceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_WorkspaceAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).WorkspaceAll(ctx, req.(*WorkspaceAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_WorkspaceFindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceFindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).WorkspaceFindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_WorkspaceFindByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).WorkspaceFindByID(ctx, req.(*WorkspaceFindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_WorkspaceLicenseID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceLicenseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).WorkspaceLicenseID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_WorkspaceLicenseID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).WorkspaceLicenseID(ctx, req.(*WorkspaceLicenseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_VerifyWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).VerifyWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_VerifyWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).VerifyWorkspace(ctx, req.(*VerifyWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_WorkspaceRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).WorkspaceRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_WorkspaceRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).WorkspaceRoot(ctx, req.(*WorkspaceRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceService_ServiceDesc is the grpc.ServiceDesc for WorkspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cti.workspace.v1.WorkspaceService",
	HandlerType: (*WorkspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigByWorkspaceID",
			Handler:    _WorkspaceService_ConfigByWorkspaceID_Handler,
		},
		{
			MethodName: "ConfigCheckIPWhiteList",
			Handler:    _WorkspaceService_ConfigCheckIPWhiteList_Handler,
		},
		{
			MethodName: "ConfigTimeZoneByWorkspaceID",
			Handler:    _WorkspaceService_ConfigTimeZoneByWorkspaceID_Handler,
		},
		{
			MethodName: "ConfigSalaryByStaffSale",
			Handler:    _WorkspaceService_ConfigSalaryByStaffSale_Handler,
		},
		{
			MethodName: "ConfigSalaryByCoachSale",
			Handler:    _WorkspaceService_ConfigSalaryByCoachSale_Handler,
		},
		{
			MethodName: "ConfigSalaryByRose",
			Handler:    _WorkspaceService_ConfigSalaryByRose_Handler,
		},
		{
			MethodName: "ConfigSalaryByImagePrint",
			Handler:    _WorkspaceService_ConfigSalaryByImagePrint_Handler,
		},
		{
			MethodName: "WorkspaceAll",
			Handler:    _WorkspaceService_WorkspaceAll_Handler,
		},
		{
			MethodName: "WorkspaceFindByID",
			Handler:    _WorkspaceService_WorkspaceFindByID_Handler,
		},
		{
			MethodName: "WorkspaceLicenseID",
			Handler:    _WorkspaceService_WorkspaceLicenseID_Handler,
		},
		{
			MethodName: "VerifyWorkspace",
			Handler:    _WorkspaceService_VerifyWorkspace_Handler,
		},
		{
			MethodName: "WorkspaceRoot",
			Handler:    _WorkspaceService_WorkspaceRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace.proto",
}
