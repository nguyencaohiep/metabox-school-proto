// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_TotalSalesForOne_FullMethodName             = "/cti.order.v1.OrderService/TotalSalesForOne"
	OrderService_TotalSalesForTeam_FullMethodName            = "/cti.order.v1.OrderService/TotalSalesForTeam"
	OrderService_TotalSalesForServiceCategory_FullMethodName = "/cti.order.v1.OrderService/TotalSalesForServiceCategory"
	OrderService_TotalRevenueForOne_FullMethodName           = "/cti.order.v1.OrderService/TotalRevenueForOne"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	TotalSalesForOne(ctx context.Context, in *TotalSalesForOneRequest, opts ...grpc.CallOption) (*TotalSalesForOneResponse, error)
	TotalSalesForTeam(ctx context.Context, in *TotalSalesForTeamRequest, opts ...grpc.CallOption) (*TotalSalesForTeamResponse, error)
	TotalSalesForServiceCategory(ctx context.Context, in *TotalSalesForServiceCategoryRequest, opts ...grpc.CallOption) (*TotalSalesForServiceCategoryResponse, error)
	TotalRevenueForOne(ctx context.Context, in *TotalRevenueForOneRequest, opts ...grpc.CallOption) (*TotalRevenueForOneResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) TotalSalesForOne(ctx context.Context, in *TotalSalesForOneRequest, opts ...grpc.CallOption) (*TotalSalesForOneResponse, error) {
	out := new(TotalSalesForOneResponse)
	err := c.cc.Invoke(ctx, OrderService_TotalSalesForOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TotalSalesForTeam(ctx context.Context, in *TotalSalesForTeamRequest, opts ...grpc.CallOption) (*TotalSalesForTeamResponse, error) {
	out := new(TotalSalesForTeamResponse)
	err := c.cc.Invoke(ctx, OrderService_TotalSalesForTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TotalSalesForServiceCategory(ctx context.Context, in *TotalSalesForServiceCategoryRequest, opts ...grpc.CallOption) (*TotalSalesForServiceCategoryResponse, error) {
	out := new(TotalSalesForServiceCategoryResponse)
	err := c.cc.Invoke(ctx, OrderService_TotalSalesForServiceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TotalRevenueForOne(ctx context.Context, in *TotalRevenueForOneRequest, opts ...grpc.CallOption) (*TotalRevenueForOneResponse, error) {
	out := new(TotalRevenueForOneResponse)
	err := c.cc.Invoke(ctx, OrderService_TotalRevenueForOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	TotalSalesForOne(context.Context, *TotalSalesForOneRequest) (*TotalSalesForOneResponse, error)
	TotalSalesForTeam(context.Context, *TotalSalesForTeamRequest) (*TotalSalesForTeamResponse, error)
	TotalSalesForServiceCategory(context.Context, *TotalSalesForServiceCategoryRequest) (*TotalSalesForServiceCategoryResponse, error)
	TotalRevenueForOne(context.Context, *TotalRevenueForOneRequest) (*TotalRevenueForOneResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) TotalSalesForOne(context.Context, *TotalSalesForOneRequest) (*TotalSalesForOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSalesForOne not implemented")
}
func (UnimplementedOrderServiceServer) TotalSalesForTeam(context.Context, *TotalSalesForTeamRequest) (*TotalSalesForTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSalesForTeam not implemented")
}
func (UnimplementedOrderServiceServer) TotalSalesForServiceCategory(context.Context, *TotalSalesForServiceCategoryRequest) (*TotalSalesForServiceCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSalesForServiceCategory not implemented")
}
func (UnimplementedOrderServiceServer) TotalRevenueForOne(context.Context, *TotalRevenueForOneRequest) (*TotalRevenueForOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRevenueForOne not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_TotalSalesForOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalSalesForOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TotalSalesForOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TotalSalesForOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TotalSalesForOne(ctx, req.(*TotalSalesForOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TotalSalesForTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalSalesForTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TotalSalesForTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TotalSalesForTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TotalSalesForTeam(ctx, req.(*TotalSalesForTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TotalSalesForServiceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalSalesForServiceCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TotalSalesForServiceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TotalSalesForServiceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TotalSalesForServiceCategory(ctx, req.(*TotalSalesForServiceCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TotalRevenueForOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalRevenueForOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TotalRevenueForOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TotalRevenueForOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TotalRevenueForOne(ctx, req.(*TotalRevenueForOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cti.order.v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TotalSalesForOne",
			Handler:    _OrderService_TotalSalesForOne_Handler,
		},
		{
			MethodName: "TotalSalesForTeam",
			Handler:    _OrderService_TotalSalesForTeam_Handler,
		},
		{
			MethodName: "TotalSalesForServiceCategory",
			Handler:    _OrderService_TotalSalesForServiceCategory_Handler,
		},
		{
			MethodName: "TotalRevenueForOne",
			Handler:    _OrderService_TotalRevenueForOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
