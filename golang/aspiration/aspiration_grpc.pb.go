// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: aspiration.proto

package aspiration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AspirationService_AspirationDeleteByStudentID_FullMethodName = "/mex.aspiration.v1.AspirationService/AspirationDeleteByStudentID"
)

// AspirationServiceClient is the client API for AspirationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AspirationServiceClient interface {
	AspirationDeleteByStudentID(ctx context.Context, in *AspirationDeleteByStudentIDRequest, opts ...grpc.CallOption) (*AspirationDeleteByStudentIDRespone, error)
}

type aspirationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAspirationServiceClient(cc grpc.ClientConnInterface) AspirationServiceClient {
	return &aspirationServiceClient{cc}
}

func (c *aspirationServiceClient) AspirationDeleteByStudentID(ctx context.Context, in *AspirationDeleteByStudentIDRequest, opts ...grpc.CallOption) (*AspirationDeleteByStudentIDRespone, error) {
	out := new(AspirationDeleteByStudentIDRespone)
	err := c.cc.Invoke(ctx, AspirationService_AspirationDeleteByStudentID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AspirationServiceServer is the server API for AspirationService service.
// All implementations must embed UnimplementedAspirationServiceServer
// for forward compatibility
type AspirationServiceServer interface {
	AspirationDeleteByStudentID(context.Context, *AspirationDeleteByStudentIDRequest) (*AspirationDeleteByStudentIDRespone, error)
	mustEmbedUnimplementedAspirationServiceServer()
}

// UnimplementedAspirationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAspirationServiceServer struct {
}

func (UnimplementedAspirationServiceServer) AspirationDeleteByStudentID(context.Context, *AspirationDeleteByStudentIDRequest) (*AspirationDeleteByStudentIDRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AspirationDeleteByStudentID not implemented")
}
func (UnimplementedAspirationServiceServer) mustEmbedUnimplementedAspirationServiceServer() {}

// UnsafeAspirationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AspirationServiceServer will
// result in compilation errors.
type UnsafeAspirationServiceServer interface {
	mustEmbedUnimplementedAspirationServiceServer()
}

func RegisterAspirationServiceServer(s grpc.ServiceRegistrar, srv AspirationServiceServer) {
	s.RegisterService(&AspirationService_ServiceDesc, srv)
}

func _AspirationService_AspirationDeleteByStudentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AspirationDeleteByStudentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AspirationServiceServer).AspirationDeleteByStudentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AspirationService_AspirationDeleteByStudentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AspirationServiceServer).AspirationDeleteByStudentID(ctx, req.(*AspirationDeleteByStudentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AspirationService_ServiceDesc is the grpc.ServiceDesc for AspirationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AspirationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mex.aspiration.v1.AspirationService",
	HandlerType: (*AspirationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AspirationDeleteByStudentID",
			Handler:    _AspirationService_AspirationDeleteByStudentID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aspiration.proto",
}
