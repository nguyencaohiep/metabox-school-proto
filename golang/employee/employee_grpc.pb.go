// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: employee.proto

package employee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmployeeService_JobCreate_FullMethodName                               = "/cti.employee.v1.EmployeeService/JobCreate"
	EmployeeService_JobCreateCoach_FullMethodName                          = "/cti.employee.v1.EmployeeService/JobCreateCoach"
	EmployeeService_JobDeleteCoach_FullMethodName                          = "/cti.employee.v1.EmployeeService/JobDeleteCoach"
	EmployeeService_JobUpdateStatus_FullMethodName                         = "/cti.employee.v1.EmployeeService/JobUpdateStatus"
	EmployeeService_JobUpdateWhenBookingDone_FullMethodName                = "/cti.employee.v1.EmployeeService/JobUpdateWhenBookingDone"
	EmployeeService_JobUpdateWhenBookingAddLinkImageRetouch_FullMethodName = "/cti.employee.v1.EmployeeService/JobUpdateWhenBookingAddLinkImageRetouch"
	EmployeeService_PositionByAccountID_FullMethodName                     = "/cti.employee.v1.EmployeeService/PositionByAccountID"
	EmployeeService_StaffsByName_FullMethodName                            = "/cti.employee.v1.EmployeeService/StaffsByName"
	EmployeeService_StaffInfos_FullMethodName                              = "/cti.employee.v1.EmployeeService/StaffInfos"
	EmployeeService_StaffByAccountID_FullMethodName                        = "/cti.employee.v1.EmployeeService/StaffByAccountID"
	EmployeeService_StaffStatusByAccountID_FullMethodName                  = "/cti.employee.v1.EmployeeService/StaffStatusByAccountID"
	EmployeeService_StaffSubWorkspaceStatus_FullMethodName                 = "/cti.employee.v1.EmployeeService/StaffSubWorkspaceStatus"
)

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	JobCreate(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*JobCreateResponse, error)
	JobCreateCoach(ctx context.Context, in *JobCreateCoachRequest, opts ...grpc.CallOption) (*JobCreateCoachResponse, error)
	JobDeleteCoach(ctx context.Context, in *JobDeleteCoachRequest, opts ...grpc.CallOption) (*JobDeleteCoachResponse, error)
	JobUpdateStatus(ctx context.Context, in *JobUpdateStatusRequest, opts ...grpc.CallOption) (*JobUpdateStatusResponse, error)
	JobUpdateWhenBookingDone(ctx context.Context, in *JobUpdateWhenBookingDoneRequest, opts ...grpc.CallOption) (*JobUpdateWhenBookingDoneResponse, error)
	JobUpdateWhenBookingAddLinkImageRetouch(ctx context.Context, in *JobUpdateWhenBookingAddLinkImageRetouchRequest, opts ...grpc.CallOption) (*JobUpdateWhenBookingAddLinkImageRetouchResponse, error)
	PositionByAccountID(ctx context.Context, in *PositionByAccountIDRequest, opts ...grpc.CallOption) (*PositionByAccountIDResponse, error)
	StaffsByName(ctx context.Context, in *StaffsByNameRequest, opts ...grpc.CallOption) (*StaffsByNameResponse, error)
	StaffInfos(ctx context.Context, in *StaffInfosRequest, opts ...grpc.CallOption) (*StaffInfosResponse, error)
	StaffByAccountID(ctx context.Context, in *StaffByAccountIDRequest, opts ...grpc.CallOption) (*StaffByAccountIDResponse, error)
	StaffStatusByAccountID(ctx context.Context, in *StaffStatusByAccountIDRequest, opts ...grpc.CallOption) (*StaffStatusByAccountIDResponse, error)
	StaffSubWorkspaceStatus(ctx context.Context, in *StaffSubWorkspaceStatusRequest, opts ...grpc.CallOption) (*StaffSubWorkspaceStatusResponse, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) JobCreate(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*JobCreateResponse, error) {
	out := new(JobCreateResponse)
	err := c.cc.Invoke(ctx, EmployeeService_JobCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) JobCreateCoach(ctx context.Context, in *JobCreateCoachRequest, opts ...grpc.CallOption) (*JobCreateCoachResponse, error) {
	out := new(JobCreateCoachResponse)
	err := c.cc.Invoke(ctx, EmployeeService_JobCreateCoach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) JobDeleteCoach(ctx context.Context, in *JobDeleteCoachRequest, opts ...grpc.CallOption) (*JobDeleteCoachResponse, error) {
	out := new(JobDeleteCoachResponse)
	err := c.cc.Invoke(ctx, EmployeeService_JobDeleteCoach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) JobUpdateStatus(ctx context.Context, in *JobUpdateStatusRequest, opts ...grpc.CallOption) (*JobUpdateStatusResponse, error) {
	out := new(JobUpdateStatusResponse)
	err := c.cc.Invoke(ctx, EmployeeService_JobUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) JobUpdateWhenBookingDone(ctx context.Context, in *JobUpdateWhenBookingDoneRequest, opts ...grpc.CallOption) (*JobUpdateWhenBookingDoneResponse, error) {
	out := new(JobUpdateWhenBookingDoneResponse)
	err := c.cc.Invoke(ctx, EmployeeService_JobUpdateWhenBookingDone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) JobUpdateWhenBookingAddLinkImageRetouch(ctx context.Context, in *JobUpdateWhenBookingAddLinkImageRetouchRequest, opts ...grpc.CallOption) (*JobUpdateWhenBookingAddLinkImageRetouchResponse, error) {
	out := new(JobUpdateWhenBookingAddLinkImageRetouchResponse)
	err := c.cc.Invoke(ctx, EmployeeService_JobUpdateWhenBookingAddLinkImageRetouch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) PositionByAccountID(ctx context.Context, in *PositionByAccountIDRequest, opts ...grpc.CallOption) (*PositionByAccountIDResponse, error) {
	out := new(PositionByAccountIDResponse)
	err := c.cc.Invoke(ctx, EmployeeService_PositionByAccountID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) StaffsByName(ctx context.Context, in *StaffsByNameRequest, opts ...grpc.CallOption) (*StaffsByNameResponse, error) {
	out := new(StaffsByNameResponse)
	err := c.cc.Invoke(ctx, EmployeeService_StaffsByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) StaffInfos(ctx context.Context, in *StaffInfosRequest, opts ...grpc.CallOption) (*StaffInfosResponse, error) {
	out := new(StaffInfosResponse)
	err := c.cc.Invoke(ctx, EmployeeService_StaffInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) StaffByAccountID(ctx context.Context, in *StaffByAccountIDRequest, opts ...grpc.CallOption) (*StaffByAccountIDResponse, error) {
	out := new(StaffByAccountIDResponse)
	err := c.cc.Invoke(ctx, EmployeeService_StaffByAccountID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) StaffStatusByAccountID(ctx context.Context, in *StaffStatusByAccountIDRequest, opts ...grpc.CallOption) (*StaffStatusByAccountIDResponse, error) {
	out := new(StaffStatusByAccountIDResponse)
	err := c.cc.Invoke(ctx, EmployeeService_StaffStatusByAccountID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) StaffSubWorkspaceStatus(ctx context.Context, in *StaffSubWorkspaceStatusRequest, opts ...grpc.CallOption) (*StaffSubWorkspaceStatusResponse, error) {
	out := new(StaffSubWorkspaceStatusResponse)
	err := c.cc.Invoke(ctx, EmployeeService_StaffSubWorkspaceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility
type EmployeeServiceServer interface {
	JobCreate(context.Context, *JobCreateRequest) (*JobCreateResponse, error)
	JobCreateCoach(context.Context, *JobCreateCoachRequest) (*JobCreateCoachResponse, error)
	JobDeleteCoach(context.Context, *JobDeleteCoachRequest) (*JobDeleteCoachResponse, error)
	JobUpdateStatus(context.Context, *JobUpdateStatusRequest) (*JobUpdateStatusResponse, error)
	JobUpdateWhenBookingDone(context.Context, *JobUpdateWhenBookingDoneRequest) (*JobUpdateWhenBookingDoneResponse, error)
	JobUpdateWhenBookingAddLinkImageRetouch(context.Context, *JobUpdateWhenBookingAddLinkImageRetouchRequest) (*JobUpdateWhenBookingAddLinkImageRetouchResponse, error)
	PositionByAccountID(context.Context, *PositionByAccountIDRequest) (*PositionByAccountIDResponse, error)
	StaffsByName(context.Context, *StaffsByNameRequest) (*StaffsByNameResponse, error)
	StaffInfos(context.Context, *StaffInfosRequest) (*StaffInfosResponse, error)
	StaffByAccountID(context.Context, *StaffByAccountIDRequest) (*StaffByAccountIDResponse, error)
	StaffStatusByAccountID(context.Context, *StaffStatusByAccountIDRequest) (*StaffStatusByAccountIDResponse, error)
	StaffSubWorkspaceStatus(context.Context, *StaffSubWorkspaceStatusRequest) (*StaffSubWorkspaceStatusResponse, error)
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeServiceServer struct {
}

func (UnimplementedEmployeeServiceServer) JobCreate(context.Context, *JobCreateRequest) (*JobCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobCreate not implemented")
}
func (UnimplementedEmployeeServiceServer) JobCreateCoach(context.Context, *JobCreateCoachRequest) (*JobCreateCoachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobCreateCoach not implemented")
}
func (UnimplementedEmployeeServiceServer) JobDeleteCoach(context.Context, *JobDeleteCoachRequest) (*JobDeleteCoachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobDeleteCoach not implemented")
}
func (UnimplementedEmployeeServiceServer) JobUpdateStatus(context.Context, *JobUpdateStatusRequest) (*JobUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobUpdateStatus not implemented")
}
func (UnimplementedEmployeeServiceServer) JobUpdateWhenBookingDone(context.Context, *JobUpdateWhenBookingDoneRequest) (*JobUpdateWhenBookingDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobUpdateWhenBookingDone not implemented")
}
func (UnimplementedEmployeeServiceServer) JobUpdateWhenBookingAddLinkImageRetouch(context.Context, *JobUpdateWhenBookingAddLinkImageRetouchRequest) (*JobUpdateWhenBookingAddLinkImageRetouchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobUpdateWhenBookingAddLinkImageRetouch not implemented")
}
func (UnimplementedEmployeeServiceServer) PositionByAccountID(context.Context, *PositionByAccountIDRequest) (*PositionByAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionByAccountID not implemented")
}
func (UnimplementedEmployeeServiceServer) StaffsByName(context.Context, *StaffsByNameRequest) (*StaffsByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffsByName not implemented")
}
func (UnimplementedEmployeeServiceServer) StaffInfos(context.Context, *StaffInfosRequest) (*StaffInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffInfos not implemented")
}
func (UnimplementedEmployeeServiceServer) StaffByAccountID(context.Context, *StaffByAccountIDRequest) (*StaffByAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffByAccountID not implemented")
}
func (UnimplementedEmployeeServiceServer) StaffStatusByAccountID(context.Context, *StaffStatusByAccountIDRequest) (*StaffStatusByAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffStatusByAccountID not implemented")
}
func (UnimplementedEmployeeServiceServer) StaffSubWorkspaceStatus(context.Context, *StaffSubWorkspaceStatusRequest) (*StaffSubWorkspaceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaffSubWorkspaceStatus not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_JobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).JobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_JobCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).JobCreate(ctx, req.(*JobCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_JobCreateCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreateCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).JobCreateCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_JobCreateCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).JobCreateCoach(ctx, req.(*JobCreateCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_JobDeleteCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDeleteCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).JobDeleteCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_JobDeleteCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).JobDeleteCoach(ctx, req.(*JobDeleteCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_JobUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).JobUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_JobUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).JobUpdateStatus(ctx, req.(*JobUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_JobUpdateWhenBookingDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobUpdateWhenBookingDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).JobUpdateWhenBookingDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_JobUpdateWhenBookingDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).JobUpdateWhenBookingDone(ctx, req.(*JobUpdateWhenBookingDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_JobUpdateWhenBookingAddLinkImageRetouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobUpdateWhenBookingAddLinkImageRetouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).JobUpdateWhenBookingAddLinkImageRetouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_JobUpdateWhenBookingAddLinkImageRetouch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).JobUpdateWhenBookingAddLinkImageRetouch(ctx, req.(*JobUpdateWhenBookingAddLinkImageRetouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_PositionByAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionByAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).PositionByAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_PositionByAccountID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).PositionByAccountID(ctx, req.(*PositionByAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_StaffsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).StaffsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_StaffsByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).StaffsByName(ctx, req.(*StaffsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_StaffInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).StaffInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_StaffInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).StaffInfos(ctx, req.(*StaffInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_StaffByAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffByAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).StaffByAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_StaffByAccountID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).StaffByAccountID(ctx, req.(*StaffByAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_StaffStatusByAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffStatusByAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).StaffStatusByAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_StaffStatusByAccountID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).StaffStatusByAccountID(ctx, req.(*StaffStatusByAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_StaffSubWorkspaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffSubWorkspaceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).StaffSubWorkspaceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_StaffSubWorkspaceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).StaffSubWorkspaceStatus(ctx, req.(*StaffSubWorkspaceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cti.employee.v1.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobCreate",
			Handler:    _EmployeeService_JobCreate_Handler,
		},
		{
			MethodName: "JobCreateCoach",
			Handler:    _EmployeeService_JobCreateCoach_Handler,
		},
		{
			MethodName: "JobDeleteCoach",
			Handler:    _EmployeeService_JobDeleteCoach_Handler,
		},
		{
			MethodName: "JobUpdateStatus",
			Handler:    _EmployeeService_JobUpdateStatus_Handler,
		},
		{
			MethodName: "JobUpdateWhenBookingDone",
			Handler:    _EmployeeService_JobUpdateWhenBookingDone_Handler,
		},
		{
			MethodName: "JobUpdateWhenBookingAddLinkImageRetouch",
			Handler:    _EmployeeService_JobUpdateWhenBookingAddLinkImageRetouch_Handler,
		},
		{
			MethodName: "PositionByAccountID",
			Handler:    _EmployeeService_PositionByAccountID_Handler,
		},
		{
			MethodName: "StaffsByName",
			Handler:    _EmployeeService_StaffsByName_Handler,
		},
		{
			MethodName: "StaffInfos",
			Handler:    _EmployeeService_StaffInfos_Handler,
		},
		{
			MethodName: "StaffByAccountID",
			Handler:    _EmployeeService_StaffByAccountID_Handler,
		},
		{
			MethodName: "StaffStatusByAccountID",
			Handler:    _EmployeeService_StaffStatusByAccountID_Handler,
		},
		{
			MethodName: "StaffSubWorkspaceStatus",
			Handler:    _EmployeeService_StaffSubWorkspaceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee.proto",
}
